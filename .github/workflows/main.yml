name: Android Kernel
on:
  workflow_dispatch:

jobs:
  buildkernel:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo and submodules (important to avoid missing files)
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install required dependencies
      - name: Setup environment
        run: |   
          sudo apt-get update && sudo apt-get install -y \
           bc flex git ccache automake lzop bison gperf build-essential \
           zip curl zlib1g-dev g++-multilib python3-networkx libxml2-utils \
           bzip2 libbz2-dev squashfs-tools pngcrush schedtool dpkg-dev \
           liblz4-tool optipng libssl-dev python-is-python3 python3-virtualenv

      - name: Download and extract Android Clang toolchain
        run: |
          mkdir -p toolchain/clang
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r450784d.tar.gz -O clang.tar.gz
          tar -xzf clang.tar.gz -C toolchain/clang --strip-components=1

      # Export environment variables for clang build
      - name: Set environment variables for build
        run: |
          echo "PATH=$(pwd)/toolchain/clang/bin:\$PATH" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CROSS_COMPILE=" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV

      # Clean previous build files before starting fresh build
      - name: Clean kernel source
        run: make mrproper

      # Set defconfig - replace with your device's if needed
      - name: Set defconfig
        run: make vendor/y2q_chn_openx_defconfig

      # Build kernel using clang and parallel jobs
      - name: Build kernel
        run: make -j$(nproc)

      # Package kernel into AnyKernel3 zip
      - name: Package kernel
        run: |
          git clone https://github.com/Mohamedfullhd/AnyKernel3.git AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md

          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          else
            echo "No kernel image found!"
            exit 1
          fi

          if [[ -f out/arch/arm64/boot/dtbo.img ]]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

          cd AnyKernel3
          zip -r ../kernel_flashable.zip .

      # Upload the flashable kernel zip as artifact
      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel_flashable_zip
          path: kernel_flashable.zip
